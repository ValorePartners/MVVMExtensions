
//This file is a starter for implementing the SterlingDB NoSql

	[Preserve(AllMembers=true)]
	public class Person
	{
		public int Id{ get; set; }

		public string FirstName{ get; set; }

		public string LastName{ get; set; }

		public string UserName{ get; set; }

		public string Password{ get; set; }

		public Person ()
		{

		}
	}

	public class PersonRespository: DbRepository<Person,int>
	{
		public PersonRespository(): base(AppDb.Database)
		{

		}
		public async Task<List<Person>> GetByFirstOrLastName(string value)
		{
			return await Task.Run(() =>
				{
					var results = (from x in AppDb.Database.Query<Person, int>()
						where x.LazyValue.Value.FirstName.Contains(value) ||
						x.LazyValue.Value.LastName.Contains(value)
						select x).ToList();

					return results.ToGenericList();
				});
		}
	}

	public class DemoDatabase : BaseDatabaseInstance
	{
		public DemoDatabase(){

		}
		public override string Name
		{
			get { return "DemoDatabase"; }
		}

		protected override System.Collections.Generic.List<ITableDefinition> RegisterTables()
		{
			var list = new System.Collections.Generic.List<ITableDefinition>();
			list.Add(CreateTableDefinition<Person ,int>(i => i.Id));

			return list;
		}
	}

	public class AppDb
	{
		private static ISterlingDatabaseInstance _database = null;
		private static SterlingEngine _engine = null;
		private static SterlingDefaultLogger _logger = null;

		public static ISterlingDatabaseInstance Database
		{
			get
			{
				return _database;
			}
		}

		public static void Init(){
			if(_database==null)
				_ActivateEngine();
		}

		public static void Close(){
			_DeactivateEngine();
		}

		private static void _ActivateEngine()
		{
			_engine = new SterlingEngine();
			_logger = new SterlingDefaultLogger(SterlingLogLevel.Information);
			_engine.Activate();

			_database = _engine.SterlingDatabase.RegisterDatabase<DemoDatabase>(new IsolatedStorageDriver());

			var maxPdx = _database.GetIntegerIndex<Person>();
			_database.RegisterTrigger<Person, int>(new IntTrigger<Person>(maxPdx,"Id"));

		}

		private static void _DeactivateEngine()
		{
			_logger.Detach();
			_engine.Dispose();
			_database = null;
			_engine = null;
		}
	}
